/**
 * Copyright (c) 2011 - 2012, Florian Pirchner - lunifera.org
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Sources generated by Xtext  
 * 
 * Contributors:
 *  		Hans Georg Gl√∂ckler - Initial implementation
 *  		Florian Pirchner - Initial implementation
 */
package org.lunifera.dsl.entity.semantic.model.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.lunifera.dsl.entity.semantic.model.EntityPackage;
import org.lunifera.dsl.entity.semantic.model.LEntity;
import org.lunifera.dsl.entity.semantic.model.LEntityProp;
import org.lunifera.dsl.entity.semantic.model.LIndex;
import org.lunifera.dsl.entity.semantic.model.LOperation;

/**
 * <!-- begin-user-doc --> An implementation of the model object '
 * <em><b>LEntity</b></em>'. <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 * <li>
 * {@link org.lunifera.dsl.entity.semantic.model.impl.LEntityImpl#getPersistenceName
 * <em>Persistence Name</em>}</li>
 * <li>
 * {@link org.lunifera.dsl.entity.semantic.model.impl.LEntityImpl#isCacheable
 * <em>Cacheable</em>}</li>
 * <li>
 * {@link org.lunifera.dsl.entity.semantic.model.impl.LEntityImpl#isHistorized
 * <em>Historized</em>}</li>
 * <li>
 * {@link org.lunifera.dsl.entity.semantic.model.impl.LEntityImpl#getProperties
 * <em>Properties</em>}</li>
 * <li>
 * {@link org.lunifera.dsl.entity.semantic.model.impl.LEntityImpl#getOperations
 * <em>Operations</em>}</li>
 * <li>
 * {@link org.lunifera.dsl.entity.semantic.model.impl.LEntityImpl#getIndexes
 * <em>Indexes</em>}</li>
 * </ul>
 * </p>
 * 
 * @generated
 */
public class LEntityImpl extends LClassImpl implements LEntity {
	/**
	 * The default value of the '{@link #getPersistenceName()
	 * <em>Persistence Name</em>}' attribute. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @see #getPersistenceName()
	 * @generated
	 * @ordered
	 */
	protected static final String PERSISTENCE_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getPersistenceName()
	 * <em>Persistence Name</em>}' attribute. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @see #getPersistenceName()
	 * @generated
	 * @ordered
	 */
	protected String persistenceName = PERSISTENCE_NAME_EDEFAULT;

	/**
	 * The default value of the '{@link #isCacheable() <em>Cacheable</em>}'
	 * attribute. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @see #isCacheable()
	 * @generated
	 * @ordered
	 */
	protected static final boolean CACHEABLE_EDEFAULT = false;

	/**
	 * The cached value of the '{@link #isCacheable() <em>Cacheable</em>}'
	 * attribute. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @see #isCacheable()
	 * @generated
	 * @ordered
	 */
	protected boolean cacheable = CACHEABLE_EDEFAULT;

	/**
	 * The default value of the '{@link #isHistorized() <em>Historized</em>}'
	 * attribute. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @see #isHistorized()
	 * @generated
	 * @ordered
	 */
	protected static final boolean HISTORIZED_EDEFAULT = false;

	/**
	 * The cached value of the '{@link #isHistorized() <em>Historized</em>}'
	 * attribute. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @see #isHistorized()
	 * @generated
	 * @ordered
	 */
	protected boolean historized = HISTORIZED_EDEFAULT;

	/**
	 * The cached value of the '{@link #getProperties() <em>Properties</em>}'
	 * containment reference list. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @see #getProperties()
	 * @generated
	 * @ordered
	 */
	protected EList<LEntityProp> properties;

	/**
	 * The cached value of the '{@link #getOperations() <em>Operations</em>}'
	 * containment reference list. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @see #getOperations()
	 * @generated
	 * @ordered
	 */
	protected EList<LOperation> operations;

	/**
	 * The cached value of the '{@link #getIndexes() <em>Indexes</em>}'
	 * containment reference list. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @see #getIndexes()
	 * @generated
	 * @ordered
	 */
	protected EList<LIndex> indexes;

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected LEntityImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return EntityPackage.Literals.LENTITY;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public String getPersistenceName() {
		return persistenceName;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void setPersistenceName(String newPersistenceName) {
		String oldPersistenceName = persistenceName;
		persistenceName = newPersistenceName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET,
					EntityPackage.LENTITY__PERSISTENCE_NAME,
					oldPersistenceName, persistenceName));
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public boolean isCacheable() {
		return cacheable;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void setCacheable(boolean newCacheable) {
		boolean oldCacheable = cacheable;
		cacheable = newCacheable;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET,
					EntityPackage.LENTITY__CACHEABLE, oldCacheable, cacheable));
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public boolean isHistorized() {
		return historized;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void setHistorized(boolean newHistorized) {
		boolean oldHistorized = historized;
		historized = newHistorized;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET,
					EntityPackage.LENTITY__HISTORIZED, oldHistorized,
					historized));
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public EList<LEntityProp> getProperties() {
		if (properties == null) {
			properties = new EObjectContainmentEList<LEntityProp>(
					LEntityProp.class, this, EntityPackage.LENTITY__PROPERTIES);
		}
		return properties;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public EList<LOperation> getOperations() {
		if (operations == null) {
			operations = new EObjectContainmentEList<LOperation>(
					LOperation.class, this, EntityPackage.LENTITY__OPERATIONS);
		}
		return operations;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public EList<LIndex> getIndexes() {
		if (indexes == null) {
			indexes = new EObjectContainmentEList<LIndex>(LIndex.class, this,
					EntityPackage.LENTITY__INDEXES);
		}
		return indexes;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated NOT
	 */
	public LEntity getSuperType() {
		return (LEntity) super.getSuperType();
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd,
			int featureID, NotificationChain msgs) {
		switch (featureID) {
		case EntityPackage.LENTITY__PROPERTIES:
			return ((InternalEList<?>) getProperties()).basicRemove(otherEnd,
					msgs);
		case EntityPackage.LENTITY__OPERATIONS:
			return ((InternalEList<?>) getOperations()).basicRemove(otherEnd,
					msgs);
		case EntityPackage.LENTITY__INDEXES:
			return ((InternalEList<?>) getIndexes())
					.basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
		case EntityPackage.LENTITY__PERSISTENCE_NAME:
			return getPersistenceName();
		case EntityPackage.LENTITY__CACHEABLE:
			return isCacheable();
		case EntityPackage.LENTITY__HISTORIZED:
			return isHistorized();
		case EntityPackage.LENTITY__PROPERTIES:
			return getProperties();
		case EntityPackage.LENTITY__OPERATIONS:
			return getOperations();
		case EntityPackage.LENTITY__INDEXES:
			return getIndexes();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
		case EntityPackage.LENTITY__PERSISTENCE_NAME:
			setPersistenceName((String) newValue);
			return;
		case EntityPackage.LENTITY__CACHEABLE:
			setCacheable((Boolean) newValue);
			return;
		case EntityPackage.LENTITY__HISTORIZED:
			setHistorized((Boolean) newValue);
			return;
		case EntityPackage.LENTITY__PROPERTIES:
			getProperties().clear();
			getProperties()
					.addAll((Collection<? extends LEntityProp>) newValue);
			return;
		case EntityPackage.LENTITY__OPERATIONS:
			getOperations().clear();
			getOperations().addAll((Collection<? extends LOperation>) newValue);
			return;
		case EntityPackage.LENTITY__INDEXES:
			getIndexes().clear();
			getIndexes().addAll((Collection<? extends LIndex>) newValue);
			return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
		case EntityPackage.LENTITY__PERSISTENCE_NAME:
			setPersistenceName(PERSISTENCE_NAME_EDEFAULT);
			return;
		case EntityPackage.LENTITY__CACHEABLE:
			setCacheable(CACHEABLE_EDEFAULT);
			return;
		case EntityPackage.LENTITY__HISTORIZED:
			setHistorized(HISTORIZED_EDEFAULT);
			return;
		case EntityPackage.LENTITY__PROPERTIES:
			getProperties().clear();
			return;
		case EntityPackage.LENTITY__OPERATIONS:
			getOperations().clear();
			return;
		case EntityPackage.LENTITY__INDEXES:
			getIndexes().clear();
			return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
		case EntityPackage.LENTITY__PERSISTENCE_NAME:
			return PERSISTENCE_NAME_EDEFAULT == null ? persistenceName != null
					: !PERSISTENCE_NAME_EDEFAULT.equals(persistenceName);
		case EntityPackage.LENTITY__CACHEABLE:
			return cacheable != CACHEABLE_EDEFAULT;
		case EntityPackage.LENTITY__HISTORIZED:
			return historized != HISTORIZED_EDEFAULT;
		case EntityPackage.LENTITY__PROPERTIES:
			return properties != null && !properties.isEmpty();
		case EntityPackage.LENTITY__OPERATIONS:
			return operations != null && !operations.isEmpty();
		case EntityPackage.LENTITY__INDEXES:
			return indexes != null && !indexes.isEmpty();
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy())
			return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (persistenceName: ");
		result.append(persistenceName);
		result.append(", cacheable: ");
		result.append(cacheable);
		result.append(", historized: ");
		result.append(historized);
		result.append(')');
		return result.toString();
	}

} // LEntityImpl
