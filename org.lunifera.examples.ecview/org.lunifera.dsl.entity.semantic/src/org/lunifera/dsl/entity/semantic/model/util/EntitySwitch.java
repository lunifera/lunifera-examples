/**
 * Copyright (c) 2011 - 2012, Florian Pirchner - lunifera.org
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Sources generated by Xtext  
 * 
 * Contributors:
 *  		Hans Georg Gl√∂ckler - Initial implementation
 *  		Florian Pirchner - Initial implementation
 */
package org.lunifera.dsl.entity.semantic.model.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.util.Switch;
import org.lunifera.dsl.entity.semantic.model.*;
import org.lunifera.dsl.entity.semantic.model.EntityPackage;
import org.lunifera.dsl.entity.semantic.model.LAnnotationDef;
import org.lunifera.dsl.entity.semantic.model.LAnnotationTarget;
import org.lunifera.dsl.entity.semantic.model.LBean;
import org.lunifera.dsl.entity.semantic.model.LBeanProp;
import org.lunifera.dsl.entity.semantic.model.LClass;
import org.lunifera.dsl.entity.semantic.model.LCompilerType;
import org.lunifera.dsl.entity.semantic.model.LDataType;
import org.lunifera.dsl.entity.semantic.model.LDerivedBeanProp;
import org.lunifera.dsl.entity.semantic.model.LDerivedEntityProp;
import org.lunifera.dsl.entity.semantic.model.LDerivedProperty;
import org.lunifera.dsl.entity.semantic.model.LEntity;
import org.lunifera.dsl.entity.semantic.model.LEntityCollectionProp;
import org.lunifera.dsl.entity.semantic.model.LEntityModel;
import org.lunifera.dsl.entity.semantic.model.LEntityProp;
import org.lunifera.dsl.entity.semantic.model.LEnum;
import org.lunifera.dsl.entity.semantic.model.LEnumLiteral;
import org.lunifera.dsl.entity.semantic.model.LGenSettings;
import org.lunifera.dsl.entity.semantic.model.LImport;
import org.lunifera.dsl.entity.semantic.model.LModifier;
import org.lunifera.dsl.entity.semantic.model.LMultiplicity;
import org.lunifera.dsl.entity.semantic.model.LOperation;
import org.lunifera.dsl.entity.semantic.model.LPackage;
import org.lunifera.dsl.entity.semantic.model.LPersistentProperty;
import org.lunifera.dsl.entity.semantic.model.LProperty;
import org.lunifera.dsl.entity.semantic.model.LScalarType;
import org.lunifera.dsl.entity.semantic.model.LType;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.lunifera.dsl.entity.semantic.model.EntityPackage
 * @generated
 */
public class EntitySwitch<T> extends Switch<T> {
	/**
	 * The cached model package
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static EntityPackage modelPackage;

	/**
	 * Creates an instance of the switch.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EntitySwitch() {
		if (modelPackage == null) {
			modelPackage = EntityPackage.eINSTANCE;
		}
	}

	/**
	 * Checks whether this is a switch for the given package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @parameter ePackage the package in question.
	 * @return whether this is a switch for the given package.
	 * @generated
	 */
	@Override
	protected boolean isSwitchFor(EPackage ePackage) {
		return ePackage == modelPackage;
	}

	/**
	 * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the first non-null result returned by a <code>caseXXX</code> call.
	 * @generated
	 */
	@Override
	protected T doSwitch(int classifierID, EObject theEObject) {
		switch (classifierID) {
			case EntityPackage.LENTITY_MODEL: {
				LEntityModel lEntityModel = (LEntityModel)theEObject;
				T result = caseLEntityModel(lEntityModel);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LPACKAGE: {
				LPackage lPackage = (LPackage)theEObject;
				T result = caseLPackage(lPackage);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LIMPORT: {
				LImport lImport = (LImport)theEObject;
				T result = caseLImport(lImport);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LGEN_SETTINGS: {
				LGenSettings lGenSettings = (LGenSettings)theEObject;
				T result = caseLGenSettings(lGenSettings);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LCOMPILER_TYPE: {
				LCompilerType lCompilerType = (LCompilerType)theEObject;
				T result = caseLCompilerType(lCompilerType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LANNOTATION_DEF: {
				LAnnotationDef lAnnotationDef = (LAnnotationDef)theEObject;
				T result = caseLAnnotationDef(lAnnotationDef);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LANNOTATION_TARGET: {
				LAnnotationTarget lAnnotationTarget = (LAnnotationTarget)theEObject;
				T result = caseLAnnotationTarget(lAnnotationTarget);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LTYPE: {
				LType lType = (LType)theEObject;
				T result = caseLType(lType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LSCALAR_TYPE: {
				LScalarType lScalarType = (LScalarType)theEObject;
				T result = caseLScalarType(lScalarType);
				if (result == null) result = caseLType(lScalarType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LDATA_TYPE: {
				LDataType lDataType = (LDataType)theEObject;
				T result = caseLDataType(lDataType);
				if (result == null) result = caseLScalarType(lDataType);
				if (result == null) result = caseLType(lDataType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LENUM: {
				LEnum lEnum = (LEnum)theEObject;
				T result = caseLEnum(lEnum);
				if (result == null) result = caseLScalarType(lEnum);
				if (result == null) result = caseLType(lEnum);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LENUM_LITERAL: {
				LEnumLiteral lEnumLiteral = (LEnumLiteral)theEObject;
				T result = caseLEnumLiteral(lEnumLiteral);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LCLASS: {
				LClass lClass = (LClass)theEObject;
				T result = caseLClass(lClass);
				if (result == null) result = caseLType(lClass);
				if (result == null) result = caseLAnnotationTarget(lClass);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LBEAN: {
				LBean lBean = (LBean)theEObject;
				T result = caseLBean(lBean);
				if (result == null) result = caseLClass(lBean);
				if (result == null) result = caseLType(lBean);
				if (result == null) result = caseLAnnotationTarget(lBean);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LENTITY: {
				LEntity lEntity = (LEntity)theEObject;
				T result = caseLEntity(lEntity);
				if (result == null) result = caseLClass(lEntity);
				if (result == null) result = caseLType(lEntity);
				if (result == null) result = caseLAnnotationTarget(lEntity);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LPROPERTY: {
				LProperty lProperty = (LProperty)theEObject;
				T result = caseLProperty(lProperty);
				if (result == null) result = caseLAnnotationTarget(lProperty);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LDERIVED_PROPERTY: {
				LDerivedProperty lDerivedProperty = (LDerivedProperty)theEObject;
				T result = caseLDerivedProperty(lDerivedProperty);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LPERSISTENT_PROPERTY: {
				LPersistentProperty lPersistentProperty = (LPersistentProperty)theEObject;
				T result = caseLPersistentProperty(lPersistentProperty);
				if (result == null) result = caseLProperty(lPersistentProperty);
				if (result == null) result = caseLAnnotationTarget(lPersistentProperty);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LBEAN_PROP: {
				LBeanProp lBeanProp = (LBeanProp)theEObject;
				T result = caseLBeanProp(lBeanProp);
				if (result == null) result = caseLPersistentProperty(lBeanProp);
				if (result == null) result = caseLProperty(lBeanProp);
				if (result == null) result = caseLAnnotationTarget(lBeanProp);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LDERIVED_BEAN_PROP: {
				LDerivedBeanProp lDerivedBeanProp = (LDerivedBeanProp)theEObject;
				T result = caseLDerivedBeanProp(lDerivedBeanProp);
				if (result == null) result = caseLBeanProp(lDerivedBeanProp);
				if (result == null) result = caseLDerivedProperty(lDerivedBeanProp);
				if (result == null) result = caseLPersistentProperty(lDerivedBeanProp);
				if (result == null) result = caseLProperty(lDerivedBeanProp);
				if (result == null) result = caseLAnnotationTarget(lDerivedBeanProp);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LENTITY_PROP: {
				LEntityProp lEntityProp = (LEntityProp)theEObject;
				T result = caseLEntityProp(lEntityProp);
				if (result == null) result = caseLPersistentProperty(lEntityProp);
				if (result == null) result = caseLProperty(lEntityProp);
				if (result == null) result = caseLAnnotationTarget(lEntityProp);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LENTITY_COLLECTION_PROP: {
				LEntityCollectionProp lEntityCollectionProp = (LEntityCollectionProp)theEObject;
				T result = caseLEntityCollectionProp(lEntityCollectionProp);
				if (result == null) result = caseLEntityProp(lEntityCollectionProp);
				if (result == null) result = caseLPersistentProperty(lEntityCollectionProp);
				if (result == null) result = caseLProperty(lEntityCollectionProp);
				if (result == null) result = caseLAnnotationTarget(lEntityCollectionProp);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LDERIVED_ENTITY_PROP: {
				LDerivedEntityProp lDerivedEntityProp = (LDerivedEntityProp)theEObject;
				T result = caseLDerivedEntityProp(lDerivedEntityProp);
				if (result == null) result = caseLEntityProp(lDerivedEntityProp);
				if (result == null) result = caseLDerivedProperty(lDerivedEntityProp);
				if (result == null) result = caseLPersistentProperty(lDerivedEntityProp);
				if (result == null) result = caseLProperty(lDerivedEntityProp);
				if (result == null) result = caseLAnnotationTarget(lDerivedEntityProp);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LOPERATION: {
				LOperation lOperation = (LOperation)theEObject;
				T result = caseLOperation(lOperation);
				if (result == null) result = caseLAnnotationTarget(lOperation);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LMODIFIER: {
				LModifier lModifier = (LModifier)theEObject;
				T result = caseLModifier(lModifier);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LMULTIPLICITY: {
				LMultiplicity lMultiplicity = (LMultiplicity)theEObject;
				T result = caseLMultiplicity(lMultiplicity);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case EntityPackage.LINDEX: {
				LIndex lIndex = (LIndex)theEObject;
				T result = caseLIndex(lIndex);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			default: return defaultCase(theEObject);
		}
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LEntity Model</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LEntity Model</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLEntityModel(LEntityModel object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LPackage</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LPackage</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLPackage(LPackage object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LImport</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LImport</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLImport(LImport object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LGen Settings</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LGen Settings</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLGenSettings(LGenSettings object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LCompiler Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LCompiler Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLCompilerType(LCompilerType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LType</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LType</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLType(LType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LScalar Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LScalar Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLScalarType(LScalarType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LEntity</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LEntity</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLEntity(LEntity object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LAnnotation Target</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LAnnotation Target</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLAnnotationTarget(LAnnotationTarget object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LProperty</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LProperty</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLProperty(LProperty object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LDerived Property</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LDerived Property</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLDerivedProperty(LDerivedProperty object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LPersistent Property</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LPersistent Property</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLPersistentProperty(LPersistentProperty object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LBean Prop</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LBean Prop</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLBeanProp(LBeanProp object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LDerived Bean Prop</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LDerived Bean Prop</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLDerivedBeanProp(LDerivedBeanProp object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LEntity Prop</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LEntity Prop</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLEntityProp(LEntityProp object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LEntity Collection Prop</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LEntity Collection Prop</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLEntityCollectionProp(LEntityCollectionProp object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LDerived Entity Prop</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LDerived Entity Prop</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLDerivedEntityProp(LDerivedEntityProp object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LOperation</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LOperation</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLOperation(LOperation object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LModifier</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LModifier</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLModifier(LModifier object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LEnum</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LEnum</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLEnum(LEnum object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LEnum Literal</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LEnum Literal</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLEnumLiteral(LEnumLiteral object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LClass</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LClass</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLClass(LClass object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LBean</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LBean</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLBean(LBean object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LAnnotation Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LAnnotation Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLAnnotationDef(LAnnotationDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LMultiplicity</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LMultiplicity</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLMultiplicity(LMultiplicity object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LIndex</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LIndex</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLIndex(LIndex object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>LData Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>LData Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLDataType(LDataType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch, but this is the last case anyway.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject)
	 * @generated
	 */
	@Override
	public T defaultCase(EObject object) {
		return null;
	}

} //EntitySwitch
