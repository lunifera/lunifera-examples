/**
 * Copyright (c) 2011 - 2012, Florian Pirchner - lunifera.org
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Sources generated by Xtext  
 * 
 * Contributors:
 *  		Hans Georg Gl√∂ckler - Initial implementation
 *  		Florian Pirchner - Initial implementation
 */
package org.lunifera.dsl.entity.semantic.model.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.impl.EFactoryImpl;
import org.eclipse.emf.ecore.plugin.EcorePlugin;
import org.lunifera.dsl.entity.semantic.model.*;
import org.lunifera.dsl.entity.semantic.model.EntityFactory;
import org.lunifera.dsl.entity.semantic.model.EntityPackage;
import org.lunifera.dsl.entity.semantic.model.LAnnotationDef;
import org.lunifera.dsl.entity.semantic.model.LBean;
import org.lunifera.dsl.entity.semantic.model.LBeanProp;
import org.lunifera.dsl.entity.semantic.model.LCompilerType;
import org.lunifera.dsl.entity.semantic.model.LDataType;
import org.lunifera.dsl.entity.semantic.model.LDerivedBeanProp;
import org.lunifera.dsl.entity.semantic.model.LDerivedEntityProp;
import org.lunifera.dsl.entity.semantic.model.LDerivedProperty;
import org.lunifera.dsl.entity.semantic.model.LEntity;
import org.lunifera.dsl.entity.semantic.model.LEntityCollectionProp;
import org.lunifera.dsl.entity.semantic.model.LEntityModel;
import org.lunifera.dsl.entity.semantic.model.LEntityProp;
import org.lunifera.dsl.entity.semantic.model.LEnum;
import org.lunifera.dsl.entity.semantic.model.LEnumLiteral;
import org.lunifera.dsl.entity.semantic.model.LGenSettings;
import org.lunifera.dsl.entity.semantic.model.LImport;
import org.lunifera.dsl.entity.semantic.model.LModifier;
import org.lunifera.dsl.entity.semantic.model.LMultiplicity;
import org.lunifera.dsl.entity.semantic.model.LOperation;
import org.lunifera.dsl.entity.semantic.model.LPackage;
import org.lunifera.dsl.entity.semantic.model.LPersistentProperty;
import org.lunifera.dsl.entity.semantic.model.LProperty;
import org.lunifera.dsl.entity.semantic.model.LScalarType;
import org.lunifera.dsl.entity.semantic.model.LVisibility;
import org.lunifera.dsl.entity.semantic.model.LowerBound;
import org.lunifera.dsl.entity.semantic.model.UpperBound;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class EntityFactoryImpl extends EFactoryImpl implements EntityFactory {
	/**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static EntityFactory init() {
		try {
			EntityFactory theEntityFactory = (EntityFactory)EPackage.Registry.INSTANCE.getEFactory(EntityPackage.eNS_URI);
			if (theEntityFactory != null) {
				return theEntityFactory;
			}
		}
		catch (Exception exception) {
			EcorePlugin.INSTANCE.log(exception);
		}
		return new EntityFactoryImpl();
	}

	/**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EntityFactoryImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EObject create(EClass eClass) {
		switch (eClass.getClassifierID()) {
			case EntityPackage.LENTITY_MODEL: return createLEntityModel();
			case EntityPackage.LPACKAGE: return createLPackage();
			case EntityPackage.LIMPORT: return createLImport();
			case EntityPackage.LGEN_SETTINGS: return createLGenSettings();
			case EntityPackage.LCOMPILER_TYPE: return createLCompilerType();
			case EntityPackage.LANNOTATION_DEF: return createLAnnotationDef();
			case EntityPackage.LSCALAR_TYPE: return createLScalarType();
			case EntityPackage.LDATA_TYPE: return createLDataType();
			case EntityPackage.LENUM: return createLEnum();
			case EntityPackage.LENUM_LITERAL: return createLEnumLiteral();
			case EntityPackage.LCLASS: return createLClass();
			case EntityPackage.LBEAN: return createLBean();
			case EntityPackage.LENTITY: return createLEntity();
			case EntityPackage.LPROPERTY: return createLProperty();
			case EntityPackage.LDERIVED_PROPERTY: return createLDerivedProperty();
			case EntityPackage.LPERSISTENT_PROPERTY: return createLPersistentProperty();
			case EntityPackage.LBEAN_PROP: return createLBeanProp();
			case EntityPackage.LDERIVED_BEAN_PROP: return createLDerivedBeanProp();
			case EntityPackage.LENTITY_PROP: return createLEntityProp();
			case EntityPackage.LENTITY_COLLECTION_PROP: return createLEntityCollectionProp();
			case EntityPackage.LDERIVED_ENTITY_PROP: return createLDerivedEntityProp();
			case EntityPackage.LOPERATION: return createLOperation();
			case EntityPackage.LMODIFIER: return createLModifier();
			case EntityPackage.LMULTIPLICITY: return createLMultiplicity();
			case EntityPackage.LINDEX: return createLIndex();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object createFromString(EDataType eDataType, String initialValue) {
		switch (eDataType.getClassifierID()) {
			case EntityPackage.LVISIBILITY:
				return createLVisibilityFromString(eDataType, initialValue);
			case EntityPackage.LOWER_BOUND:
				return createLowerBoundFromString(eDataType, initialValue);
			case EntityPackage.UPPER_BOUND:
				return createUpperBoundFromString(eDataType, initialValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String convertToString(EDataType eDataType, Object instanceValue) {
		switch (eDataType.getClassifierID()) {
			case EntityPackage.LVISIBILITY:
				return convertLVisibilityToString(eDataType, instanceValue);
			case EntityPackage.LOWER_BOUND:
				return convertLowerBoundToString(eDataType, instanceValue);
			case EntityPackage.UPPER_BOUND:
				return convertUpperBoundToString(eDataType, instanceValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LEntityModel createLEntityModel() {
		LEntityModelImpl lEntityModel = new LEntityModelImpl();
		return lEntityModel;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LPackage createLPackage() {
		LPackageImpl lPackage = new LPackageImpl();
		return lPackage;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LImport createLImport() {
		LImportImpl lImport = new LImportImpl();
		return lImport;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LGenSettings createLGenSettings() {
		LGenSettingsImpl lGenSettings = new LGenSettingsImpl();
		return lGenSettings;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LCompilerType createLCompilerType() {
		LCompilerTypeImpl lCompilerType = new LCompilerTypeImpl();
		return lCompilerType;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LEntity createLEntity() {
		LEntityImpl lEntity = new LEntityImpl();
		return lEntity;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LProperty createLProperty() {
		LPropertyImpl lProperty = new LPropertyImpl();
		return lProperty;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LDerivedProperty createLDerivedProperty() {
		LDerivedPropertyImpl lDerivedProperty = new LDerivedPropertyImpl();
		return lDerivedProperty;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LPersistentProperty createLPersistentProperty() {
		LPersistentPropertyImpl lPersistentProperty = new LPersistentPropertyImpl();
		return lPersistentProperty;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LBeanProp createLBeanProp() {
		LBeanPropImpl lBeanProp = new LBeanPropImpl();
		return lBeanProp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LDerivedBeanProp createLDerivedBeanProp() {
		LDerivedBeanPropImpl lDerivedBeanProp = new LDerivedBeanPropImpl();
		return lDerivedBeanProp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LEntityProp createLEntityProp() {
		LEntityPropImpl lEntityProp = new LEntityPropImpl();
		return lEntityProp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LEntityCollectionProp createLEntityCollectionProp() {
		LEntityCollectionPropImpl lEntityCollectionProp = new LEntityCollectionPropImpl();
		return lEntityCollectionProp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LDerivedEntityProp createLDerivedEntityProp() {
		LDerivedEntityPropImpl lDerivedEntityProp = new LDerivedEntityPropImpl();
		return lDerivedEntityProp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LOperation createLOperation() {
		LOperationImpl lOperation = new LOperationImpl();
		return lOperation;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LModifier createLModifier() {
		LModifierImpl lModifier = new LModifierImpl();
		return lModifier;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LEnum createLEnum() {
		LEnumImpl lEnum = new LEnumImpl();
		return lEnum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LEnumLiteral createLEnumLiteral() {
		LEnumLiteralImpl lEnumLiteral = new LEnumLiteralImpl();
		return lEnumLiteral;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LClass createLClass() {
		LClassImpl lClass = new LClassImpl();
		return lClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LBean createLBean() {
		LBeanImpl lBean = new LBeanImpl();
		return lBean;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LAnnotationDef createLAnnotationDef() {
		LAnnotationDefImpl lAnnotationDef = new LAnnotationDefImpl();
		return lAnnotationDef;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LScalarType createLScalarType() {
		LScalarTypeImpl lScalarType = new LScalarTypeImpl();
		return lScalarType;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LMultiplicity createLMultiplicity() {
		LMultiplicityImpl lMultiplicity = new LMultiplicityImpl();
		return lMultiplicity;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LIndex createLIndex() {
		LIndexImpl lIndex = new LIndexImpl();
		return lIndex;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LDataType createLDataType() {
		LDataTypeImpl lDataType = new LDataTypeImpl();
		return lDataType;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LVisibility createLVisibilityFromString(EDataType eDataType, String initialValue) {
		LVisibility result = LVisibility.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertLVisibilityToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LowerBound createLowerBoundFromString(EDataType eDataType, String initialValue) {
		LowerBound result = LowerBound.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertLowerBoundToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public UpperBound createUpperBoundFromString(EDataType eDataType, String initialValue) {
		UpperBound result = UpperBound.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertUpperBoundToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EntityPackage getEntityPackage() {
		return (EntityPackage)getEPackage();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @deprecated
	 * @generated
	 */
	@Deprecated
	public static EntityPackage getPackage() {
		return EntityPackage.eINSTANCE;
	}

} //EntityFactoryImpl
