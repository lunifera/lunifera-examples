/*
 * generated by Xtext
 */
package org.lunifera.examples.ecview.dsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecp.ecview.common.model.core.YView
import org.eclipse.emf.ecp.ecview.^extension.model.^extension.YAlignment
import org.eclipse.emf.ecp.ecview.^extension.model.^extension.YGridLayout
import org.eclipse.emf.ecp.ecview.^extension.model.^extension.util.SimpleExtensionModelFactory
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.lunifera.examples.ecview.dsl.masterDetailDSL.UiDetailSize
import org.lunifera.examples.ecview.dsl.masterDetailDSL.UiLayoutType
import org.lunifera.examples.ecview.dsl.masterDetailDSL.UiModel
import org.lunifera.examples.ecview.dsl.masterDetailDSL.UiTable
import org.lunifera.examples.ecview.dsl.masterDetailDSL.UiTextAlignment
import org.lunifera.examples.ecview.dsl.masterDetailDSL.UiTextField
import org.lunifera.examples.ecview.dsl.masterdetail.rs.ECViewRSActivator

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class MasterDetailDSLGenerator implements IGenerator {

	SimpleExtensionModelFactory modelFactory = new SimpleExtensionModelFactory

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val YView yView = createView(resource)
		System::out.println(yView)

				ECViewRSActivator::instance.setModel(yView)
		}

		def YView createView(Resource resource) {

			val YView yView = modelFactory.createView
			val YGridLayout yContent = modelFactory.createGridLayout();
			yView.setContent(yContent);

			val UiModel model = resource.contents.get(0) as UiModel
			val tiles = model.tiles
			if (tiles != null) {
				applyLayout(yContent, tiles.layout == UiLayoutType::HORIZONTAL);

				// prepare master
				//
				val masterPart = tiles.master
				val yMasterLayout = modelFactory.createGridLayout();
				yMasterLayout.columns = 1
				yMasterLayout.spacing = true
				yMasterLayout.fillHorizontal = false
				yMasterLayout.fillVertical = false
				yContent.elements += yMasterLayout

				val masterCellstyle = yContent.addGridLayoutCellStyle(yMasterLayout)
				masterCellstyle.alignment = YAlignment::FILL_FILL

				if (tiles.layout == UiLayoutType::HORIZONTAL) {
					masterCellstyle.addSpanInfo(0, 0, 2, 3)
				} else {
					masterCellstyle.addSpanInfo(0, 0, 2, 2)
				}

				if (masterPart != null) {
					val content = masterPart.content
					if (content instanceof UiTable) {
						val yTable = modelFactory.createTable
						yTable.setId("mastertable")
						yMasterLayout.elements += yTable

						// style
						val yTableCellstyle = modelFactory.createGridLayoutCellStyle
						yTableCellstyle.target = yTable
						yTableCellstyle.alignment = YAlignment::FILL_FILL
						yMasterLayout.cellStyles += yTableCellstyle
					}
				}

				// prepare detail
				//
				val detailPart = tiles.detail
				val yDetailLayout = modelFactory.createGridLayout();
				yDetailLayout.setCssClass("detailPart");
				yDetailLayout.columns = 1
				yDetailLayout.margin = true
				yDetailLayout.spacing = true
				yDetailLayout.fillHorizontal = true
				yDetailLayout.fillVertical = false
				yContent.elements += yDetailLayout

				val detailCellstyle = yContent.addGridLayoutCellStyle(yDetailLayout)
				detailCellstyle.alignment = YAlignment::FILL_FILL

				if (tiles.layout == UiLayoutType::HORIZONTAL) {
					detailCellstyle.addSpanInfo(4, 3, 4, 3)
				} else {
					if (detailPart.layout == UiDetailSize::SMALL) {
						detailCellstyle.addSpanInfo(0, 3, 0, 4)
					} else {
						detailCellstyle.addSpanInfo(0, 3, 1, 5)
					}
				}

				if (detailPart != null) {
					for (field : detailPart.content) {
						if (field instanceof UiTextField) {

							// datadescription
							val uiTextField = field as UiTextField
							val yDatadesc = modelFactory.createDatadescription
							yDatadesc.label = uiTextField.caption

							// field
							val yTextField = modelFactory.createTextField
							yDetailLayout.elements += yTextField
							yTextField.datadescription = yDatadesc

							// style
							val textCellstyle = yDetailLayout.addGridLayoutCellStyle(yTextField)
							switch (detailPart.textAlign) {
								case UiTextAlignment::LEFT:
									textCellstyle.alignment = YAlignment::TOP_LEFT
								case UiTextAlignment::CENTER:
									textCellstyle.alignment = YAlignment::TOP_CENTER
								case UiTextAlignment::RIGHT:
									textCellstyle.alignment = YAlignment::TOP_RIGHT
								case UiTextAlignment::FILL:
									textCellstyle.alignment = YAlignment::TOP_FILL
							}
						}
					}
				}
			}
			return yView
		}

		def YView createDefaultView() {
			val YView yView = modelFactory.createView();

			return yView;
		}

		/**
	 * Applies the layout settings. Horizontal or vertical.
	 * 
	 * @param ymainLayout
	 * @param horizontal
	 */
		def void applyLayout(YGridLayout ymainLayout, boolean horizontal) {
			ymainLayout.setColumns(5);
			ymainLayout.setSpacing(true);
			ymainLayout.setFillHorizontal(true);
			ymainLayout.setFillVertical(true);
		}

	}
	